AWSTemplateFormatVersion: "2010-09-09"
Description: Elasticsearch cluster with Cognito authentication within a VPC
Parameters:
  vpcId:
    Type: String
  subnetIds:
    Type: List<String>
  ebsCapacity:
    Type: Number
  domainName:
    Type: String
  cognitoUserName:
    Type: String
  cognitoUserEmail:
    Type: String
  esSecurityGroup:
    Type: String
  # esUserArn:
  #   Type: String
Resources:
  # Cognito
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
          TemporaryPasswordValidityDays: 3
  CognitoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref domainName
      UserPoolId: !Ref CognitoUserPool
  CognitoClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      UserPoolId: !Ref CognitoUserPool
  CognitoUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: !Ref cognitoUserName
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: email
          Value: !Ref cognitoUserEmail
        - Name: email_verified
          Value: true
      ForceAliasCreation: true
  CognitoGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Precedence: 0
      UserPoolId: !Ref CognitoUserPool
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      # CognitoIdentityProviders:
      #   - ProviderName: !GetAtt CognitoUserPool.ProviderName
      #     ClientId: !Ref CognitoClient
  CognitoRoleAuth:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              "StringEquals":
                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
              "ForAnyValue:StringLike":
                cognito-identity.amazonaws.com:amr: authenticated
      Path: /
      Policies:
        - PolicyName: es-full
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - es:ESHttp*
                Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${domainName}/*'
  CognitoRoleUnauth:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              "StringEquals":
                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
              "ForAnyValue:StringLike":
                cognito-identity.amazonaws.com:amr: unauthenticated
      Path: /
      Policies:
        - PolicyName: es-readonly
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - es:Describe*
                  - es:List*
                Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${domainName}/*'
  CognitoIdentityRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        "authenticated": !GetAtt CognitoRoleAuth.Arn
        "unauthenticated": !GetAtt CognitoRoleUnauth.Arn
      # RoleMappings:
      #   "cognito-idp.us-east-1.amazonaws.com/us-east-1_xxxxxxxx:aaaaaaaaaaaaaaaaaaaaaaaaaa":
      #     AmbiguousRoleResolution: AuthenticatedRole
      #     Type: Token

  # Elasticsearch
  ElasticsearchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: es.amazonaws.com
            Action: sts:AssumeRole
      Path: /service-role/
      Policies:
        - PolicyName: es-base
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:DescribeUserPool
                  - cognito-idp:CreateUserPoolClient
                  - cognito-idp:DeleteUserPoolClient
                  - cognito-idp:DescribeUserPoolClient
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminUserGlobalSignOut
                  - cognito-idp:ListUserPoolClients
                  - cognito-identity:DescribeIdentityPool
                  - cognito-identity:UpdateIdentityPool
                  - cognito-identity:SetIdentityPoolRoles
                  - cognito-identity:GetIdentityPoolRoles
                Resource: "*"
        - PolicyName: es-additional
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeVpcs
                  - cognito-identity:ListIdentityPools
                  - cognito-idp:ListUserPools
                  - iam:GetRole
                  - iam:PassRole
                Resource: "*"
  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      AccessPolicies:
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: es:ESHttp*
          #   Condition:
          #     IpAddress:
          #       "aws:SourceIp": 10.0.10.0/23
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${domainName}/*'
          # - Effect: Allow
          #   Principal:
          #     AWS: !Ref esUserArn
          #   Action: es:ESHttp*
          #   Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${domainName}/*'
          # - Effect: Allow
          #   Principal:
          #     AWS: !GetAtt CognitoRoleAuth.Arn
          #   Action: es:ESHttp*
          #   Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${domainName}/*'
      CognitoOptions:
        Enabled: false
        # IdentityPoolId: !Ref CognitoIdentityPool
        # RoleArn: !GetAtt ElasticsearchRole.Arn
        # UserPoolId: !Ref CognitoUserPool
      DomainName: !Ref domainName
      ElasticsearchVersion: "7.4"
      EBSOptions:
        EBSEnabled: true
        VolumeSize: !Ref ebsCapacity
        VolumeType: gp2
      VPCOptions:
        SecurityGroupIds:
          - !Ref esSecurityGroup
        SubnetIds: !Ref subnetIds
Outputs:
  OutCognitoUserPool:
    Value: !Ref CognitoUserPool
  OutCognitoClientId:
    Value: !Ref CognitoClient
  OutCognitoIdentityPool:
    Value: !Ref CognitoIdentityPool
  OutCognitoProviderName:
    Value: !GetAtt CognitoUserPool.ProviderName
  OutCognitoProviderUrl:
    Value: !GetAtt CognitoUserPool.ProviderURL
  OutDomainArn:
    Value: !GetAtt ElasticsearchDomain.DomainArn
  OutDomainEndpoint:
    Value: !GetAtt ElasticsearchDomain.DomainEndpoint